if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY"))
# remove records that we don't care about
# use tidygeocoder to get the lat long of the addresses
lat_longs <- data %>%
geocode(Location,lat=latitude,long=longitude)
View(lat_longs)
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
# Location of WARN notice pdf file
location <- "./data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"), sep = "(?<=[a-zA-Z])\\s*(?=[0-9])")
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
# Location of WARN notice pdf file
location <- "./data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"),
sep = "(?<=[a-zA-Z])\\s*(?=[0-9])") %>%
mutate(Location = ifelse(is.na(Location),Location_Name,Location)) %>%
mutate(Location_Name = ifelse(Location_Name == Location, NA, Location_Name))
?geocode
View(lat_longs)
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
# Location of WARN notice pdf file
location <- "./data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"),
sep = "(?<=[a-zA-Z])\\s*(?=[0-9])") %>%
mutate(Location = ifelse(is.na(Location),Location_Name,Location)) %>%
mutate(Location_Name = ifelse(Location_Name == Location, NA, Location_Name)) %>%
geocode(Location,lat=Lat,long=Long)
# remove records that we don't care about
install.packages("leaflet")
head(data)
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
library(leaflet)
# Location of pdf file
location <- "./data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"),
sep = "(?<=[a-zA-Z])\\s*(?=[0-9])") %>%
mutate(Location = ifelse(is.na(Location),Location_Name,Location)) %>%
mutate(Location_Name = ifelse(Location_Name == Location, NA, Location_Name)) %>%
geocode(Location,lat=Lat,long=Long,method = "cascade")
# remove records that we don't care about
#
data$popup <- paste("<b>Incident #: </b>", data$Number, "<br>",
"<b>Category: </b>", data$`Call Type`,
# "<br>", "<b>Description: </b>", data$Descript,
# "<br>", "<b>Day of week: </b>", data$DayOfWeek,
"<br>", "<b>Date: </b>", data$`Date of Call`,
"<br>", "<b>Time: </b>", data$`Time of Call`,
# "<br>", "<b>PD district: </b>", data$PdDistrict,
"<br>", "<b>Resolution: </b>", data$Disposition,
"<br>", "<b>Address: </b>", data$Location,
"<br>", "<b>Longitude: </b>", data$Long,
"<br>", "<b>Latitude: </b>", data$Lat)
leaflet(data, width = "100%") %>%
addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~Long, lat = ~Lat, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
data[complete.cases(data[ , 8:9]),] %>%
leaflet(width = "100%") %>%
addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~Long, lat = ~Lat, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
?leaflet
m <- leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
library(leaflet)
m <- leaflet() %>% addTiles()
m  # a map with the default OSM tile layer
# set bounds
m %>% fitBounds(0, 40, 10, 50)
# move the center to Snedecor Hall
m <- m %>% setView(-93.65, 42.0285, zoom = 17)
m
sessionInfo()
getwd()
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
library(leaflet)
# Location of pdf file
location <- "./data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"),
sep = "(?<=[a-zA-Z])\\s*(?=[0-9])") %>%
mutate(Location = ifelse(is.na(Location),Location_Name,Location)) %>%
mutate(Location_Name = ifelse(Location_Name == Location, NA, Location_Name)) %>%
geocode(Location,lat=Lat,long=Long,method = "cascade")
# remove records that we don't care about
#
data$popup <- paste("<b>Incident #: </b>", data$Number, "<br>",
"<b>Category: </b>", data$`Call Type`,
# "<br>", "<b>Description: </b>", data$Descript,
# "<br>", "<b>Day of week: </b>", data$DayOfWeek,
"<br>", "<b>Date: </b>", data$`Date of Call`,
"<br>", "<b>Time: </b>", data$`Time of Call`,
# "<br>", "<b>PD district: </b>", data$PdDistrict,
"<br>", "<b>Resolution: </b>", data$Disposition,
"<br>", "<b>Address: </b>", data$Location,
"<br>", "<b>Longitude: </b>", data$Long,
"<br>", "<b>Latitude: </b>", data$Lat)
data[complete.cases(data[ , 8:9]),] %>%
leaflet(width = "100%") %>%
addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~Long, lat = ~Lat, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
library(leaflet)
data <- df[1:10000,]
data$popup <- paste("<b>Incident #: </b>", data$IncidntNum, "<br>", "<b>Category: </b>", data$Category,
"<br>", "<b>Description: </b>", data$Descript,
"<br>", "<b>Day of week: </b>", data$DayOfWeek,
"<br>", "<b>Date: </b>", data$Date,
"<br>", "<b>Time: </b>", data$Time,
"<br>", "<b>PD district: </b>", data$PdDistrict,
"<br>", "<b>Resolution: </b>", data$Resolution,
"<br>", "<b>Address: </b>", data$Address,
"<br>", "<b>Longitude: </b>", data$X,
"<br>", "<b>Latitude: </b>", data$Y)
leaflet(data) %>% addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~X, lat = ~Y, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
getwd()
?leaflet
shiny::runApp('Kingston_Web_App')
library(tidyverse)
library(tabulizer)
library(stringr)
library(tidygeocoder)
library(leaflet)
# Location of pdf file
location <- "C:/Users/danie/Documents/GitHub/Crime-Analysis/Rproject/Crime-Analysis/data/05282020.pdf"
# Extract the table
for(i in 1:get_n_pages(location)){
temp <-  extract_tables(location, pages = i, guess = FALSE, columns = list(c(100, 200, 300, 400, 490)))
temp <- do.call(cbind, temp)
temp <- temp[-c(1:3),]
temp <- temp %>% data.frame()
names(temp) <- temp[1,]
temp <- temp[-1,]
if(i == 1){
data <- temp
}else{
data <- rbind(data,temp)
}
}
rm(i, temp)
data <- data[-nrow(data),]
# Clean data
i <- 1
while(i < nrow(data)){
if("" %in% data[i+1,-ncol(data)]){
data[i,] <- paste(data[i,],data[i+1,])
data <- data[-(i+1),]
}else{
i <- i+1
}
}
rm(i)
proper_case <- function(x) {
return (gsub("\\b([A-Z])([A-Z]+)", "\\U\\1\\L\\2" , x, perl=TRUE))
}
data <- data %>%
mutate(`Call Type` = proper_case(`Call Type`),
Disposition = proper_case(Disposition)) %>%
mutate(Number = str_trim(Number, side = "both"),
`Date of Call` = str_trim(`Date of Call`, side = "both"),
`Time of Call` = str_trim(`Time of Call`, side = "both"),
`Call Type` = str_trim(`Call Type`, side = "both"),
Location = str_trim(Location, side = "both"),
Disposition = str_trim(Disposition, side = "both"))%>%
mutate(Number = str_squish(Number),
`Date of Call` = str_squish(`Date of Call`),
`Time of Call` = str_squish(`Time of Call`),
`Call Type` = str_squish(`Call Type`),
Location = str_squish(Location),
Disposition = str_squish(Disposition)) %>%
mutate(Location = paste0(Location, ", Kingston, NY")) %>%
separate(Location, into = c("Location_Name", "Location"),
sep = "(?<=[a-zA-Z])\\s*(?=[0-9])") %>%
mutate(Location = ifelse(is.na(Location),Location_Name,Location)) %>%
mutate(Location_Name = ifelse(Location_Name == Location, NA, Location_Name)) %>%
geocode(Location,lat=Lat,long=Long,method = "cascade")
# remove records that we don't care about
#
data$popup <- paste("<b>Incident #: </b>", data$Number, "<br>",
"<b>Category: </b>", data$`Call Type`,
# "<br>", "<b>Description: </b>", data$Descript,
# "<br>", "<b>Day of week: </b>", data$DayOfWeek,
"<br>", "<b>Date: </b>", data$`Date of Call`,
"<br>", "<b>Time: </b>", data$`Time of Call`,
# "<br>", "<b>PD district: </b>", data$PdDistrict,
"<br>", "<b>Resolution: </b>", data$Disposition,
"<br>", "<b>Address: </b>", data$Location,
"<br>", "<b>Longitude: </b>", data$Long,
"<br>", "<b>Latitude: </b>", data$Lat)
data[complete.cases(data[ , 8:9]),] %>%
leaflet(width = "100%", height = "800px") %>%
addTiles() %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(provider = "Esri.WorldStreetMap",group = "World StreetMap") %>%
addProviderTiles(provider = "Esri.WorldImagery",group = "World Imagery") %>%
# addProviderTiles(provider = "NASAGIBS.ViirsEarthAtNight2012",group = "Nighttime Imagery") %>%
addMarkers(lng = ~Long, lat = ~Lat, popup = data$popup, clusterOptions = markerClusterOptions()) %>%
addLayersControl(
baseGroups = c("OSM (default)","World StreetMap", "World Imagery"),
options = layersControlOptions(collapsed = FALSE)
)
